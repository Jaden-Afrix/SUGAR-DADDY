/*************************************************
 𝗦𝗨𝗚𝗔𝗥 𝗗𝗔𝗗𝗗𝗬 - 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗔𝗣𝗞 𝗙𝗜𝗟𝗘 𝗗𝗘𝗟𝗜𝗩𝗘𝗥𝗘𝗥 𝗩𝟯.𝟬
 𝗘𝗹𝗶𝘁𝗲 𝗗𝗶𝗿𝗲𝗰𝘁 𝗔𝗣𝗞 𝗗𝗲𝗹𝗶𝘃𝗲𝗿𝘆 𝗦𝘆𝘀𝘁𝗲𝗺
 𝗢𝘄𝗻𝗲𝗿: 𝗔𝗟𝗣𝗛𝗔-𝗕𝗟𝗔𝗞𝗘
**************************************************/

const axios = require("axios");
const got = require("got");
const stream = require("stream");
const { promisify } = require("util");
const pipeline = promisify(stream.pipeline);

const 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗔𝗣𝗜 = "https://api.nexoracle.com/downloader/apk";
const 𝗔𝗣𝗜_𝗞𝗘𝗬 = "7902cbef76b269e176";

// 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲𝘀
const 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗕𝗔𝗡𝗡𝗘𝗥 = "https://i.ibb.co/4RfnHtVr/SulaMd.jpg";
const 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗔𝗨𝗗𝗜𝗢 = "https://files.catbox.moe/cebgdf.mp3";
const 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗖𝗛𝗔𝗡𝗡𝗘𝗟 = "https://whatsapp.com/channel/0029VbAxoHNF6sn7hhz2Ss24";

// 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝘀𝗲𝗰𝘂𝗿𝗶𝘁𝘆 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿𝘀
const 𝗠𝗔𝗫_𝗦𝗜𝗭𝗘 = 150 * 1024 * 1024; // 150MB limit
const 𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗_𝗧𝗜𝗠𝗘𝗢𝗨𝗧 = 120000; // 2 minutes
const 𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡_𝗧𝗜𝗠𝗘 = 45000; // 45 seconds
const 𝗔𝗣𝗞_𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡 = {};

// 𝗕𝗼𝗹𝗱 𝘁𝗲𝘅𝘁 𝗰𝗼𝗻𝘃𝗲𝗿𝘀𝗶𝗼𝗻 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻
function 𝗯𝗼𝗹𝗱(𝘁𝗲𝘅𝘁) {
    const 𝗯𝗼𝗹𝗱𝗠𝗮𝗽 = {
        'A': '𝗔', 'B': '𝗕', 'C': '𝗖', 'D': '𝗗', 'E': '𝗘', 'F': '𝗙', 'G': '𝗚', 'H': '𝗛', 'I': '𝗜', 'J': '𝗝',
        'K': '𝗞', 'L': '𝗟', 'M': '𝗠', 'N': '𝗡', 'O': '𝗢', 'P': '𝗣', 'Q': '𝗤', 'R': '𝗥', 'S': '𝗦', 'T': '𝗧',
        'U': '𝗨', 'V': '𝗩', 'W': '𝗪', 'X': '𝗫', 'Y': '𝗬', 'Z': '𝗭',
        'a': '𝗮', 'b': '𝗯', 'c': '𝗰', 'd': '𝗱', 'e': '𝗲', 'f': '𝗳', 'g': '𝗴', 'h': '𝗵', 'i': '𝗶', 'j': '𝗷',
        'k': '𝗸', 'l': '𝗹', 'm': '𝗺', 'n': '𝗻', 'o': '𝗼', 'p': '𝗽', 'q': '𝗾', 'r': '𝗿', 's': '𝘀', 't': '𝘁',
        'u': '𝘂', 'v': '𝘃', 'w': '𝘄', 'x': '𝘅', 'y': '𝘆', 'z': '𝘇',
        '0': '𝟬', '1': '𝟭', '2': '𝟮', '3': '𝟯', '4': '𝟰', '5': '𝟱', '6': '𝟲', '7': '𝟳', '8': '𝟴', '9': '𝟵',
        ' ': ' ', '!': '!', '@': '@', '#': '#', '$': '$', '%': '%', '^': '^', '&': '&', '*': '*', 
        '(': '(', ')': ')', '-': '-', '_': '_', '+': '+', '=': '=', '[': '[', ']': ']', 
        '{': '{', '}': '}', ';': ';', ':': ':', ',': ',', '.': '.', '/': '/', '?': '?'
    };
    return text.split('').map(char => 𝗯𝗼𝗹𝗱𝗠𝗮𝗽[char] || char).join('');
}

module.exports = {
    name: "apk2",
    alias: ["dlapk2", "apkd2"],
    category: "download",
    desc: 𝗯𝗼𝗹𝗱("📦 Quantum direct APK file delivery"),
    use: 𝗯𝗼𝗹𝗱("<app_name>"),

    async exec(m, { sock, args }) {
        // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝘀𝗲𝗰𝘂𝗿𝗶𝘁𝘆 𝗽𝗿𝗼𝘁𝗼𝗰𝗼𝗹𝘀
        const 𝗾𝘂𝗲𝗿𝘆 = args.join(" ");
        if (!𝗾𝘂𝗲𝗿𝘆) return m.reply(𝗯𝗼𝗹𝗱("❌ 𝗤𝗨𝗘𝗥𝗬 𝗥𝗘𝗤𝗨𝗜𝗥𝗘𝗗\n┏━━━━━━━━━━━━━━┓\n┃ 𝗘𝗻𝘁𝗲𝗿 𝗮𝗽𝗽 𝗻𝗮𝗺𝗲 𝘁𝗼 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱\n┃ 𝗘𝘅𝗮𝗺𝗽𝗹𝗲: .𝗮𝗽𝗸𝟮 𝗶𝗻𝘀𝘁𝗮𝗴𝗿𝗮𝗺\n┗━━━━━━━━━━━━━━┛"));

        // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗰𝗼𝗼𝗹𝗱𝗼𝘄𝗻 𝗰𝗵𝗲𝗰𝗸
        const 𝘂𝘀𝗲𝗿𝗞𝗲𝘆 = `${m.sender}_apk2`;
        const 𝗹𝗮𝘀𝘁𝗥𝗲𝗾𝘂𝗲𝘀𝘁 = 𝗔𝗣𝗞_𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡[𝘂𝘀𝗲𝗿𝗞𝗲𝘆] || 0;
        const 𝗻𝗼𝘄 = Date.now();
        if (𝗻𝗼𝘄 - 𝗹𝗮𝘀𝘁𝗥𝗲𝗾𝘂𝗲𝘀𝘁 < 𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡_𝗧𝗜𝗠𝗘) {
            const 𝗿𝗲𝗺𝗮𝗶𝗻𝗶𝗻𝗴 = Math.ceil((𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡_𝗧𝗜𝗠𝗘 - (𝗻𝗼𝘄 - 𝗹𝗮𝘀𝘁𝗥𝗲𝗾𝘂𝗲𝘀𝘁)) / 1000);
            return m.reply(𝗯𝗼𝗹𝗱(`⌛ 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡\n┏━━━━━━━━━━━━━━┓\n┃ 𝗣𝗹𝗲𝗮𝘀𝗲 𝘄𝗮𝗶𝘁 ${𝗿𝗲𝗺𝗮𝗶𝗻𝗶𝗻𝗴}𝘀\n┃ 𝗯𝗲𝗳𝗼𝗿𝗲 𝗻𝗲𝘅𝘁 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱\n┗━━━━━━━━━━━━━━┛`));
        }
        𝗔𝗣𝗞_𝗖𝗢𝗢𝗟𝗗𝗢𝗪𝗡[𝘂𝘀𝗲𝗿𝗞𝗲𝘆] = 𝗻𝗼𝘄;

        // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝘀𝗲𝗮𝗿𝗰𝗵 𝗶𝗻𝗶𝘁𝗶𝗮𝘁𝗶𝗼𝗻
        const 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀𝗠𝘀𝗴 = await sock.sendMessage(m.chat, {
            text: 𝗯𝗼𝗹𝗱(`⚡ 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗔𝗣𝗞 𝗦𝗘𝗔𝗥𝗖𝗛\n
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🔍  𝗦𝗰𝗮𝗻𝗻𝗶𝗻𝗴 𝗡𝗲𝘅𝘂𝘀 𝗳𝗼𝗿: *${𝗾𝘂𝗲𝗿𝘆}*
┃  ⏱️  𝗘𝘀𝘁𝗶𝗺𝗮𝘁𝗲𝗱 𝘁𝗶𝗺𝗲: 𝟴 𝘀𝗲𝗰𝗼𝗻𝗱𝘀
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛`),
            contextInfo: {
                externalAdReply: {
                    title: 𝗯𝗼𝗹𝗱("🌌 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗔𝗣𝗞 𝗗𝗘𝗟𝗜𝗩𝗘𝗥𝗘𝗥"),
                    body: 𝗯𝗼𝗹𝗱("𝗣𝗼𝘄𝗲𝗿𝗲𝗱 𝗯𝘆 𝗡𝗲𝘅𝗢𝗿𝗮𝗰𝗹𝗲"),
                    thumbnailUrl: 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗕𝗔𝗡𝗡𝗘𝗥,
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    sourceUrl: 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗖𝗛𝗔𝗡𝗡𝗘𝗟
                }
            }
        });

        try {
            // 𝗘𝘅𝗲𝗰𝘂𝘁𝗲 𝗾𝘂𝗮𝗻𝘁𝘂𝗺 𝗿𝗲𝘁𝗿𝗶𝗲𝘃𝗮𝗹
            const { 𝗱𝗮𝘁𝗮 } = await axios.get(`${𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗔𝗣𝗜}?apikey=${𝗔𝗣𝗜_𝗞𝗘𝗬}&q=${encodeURIComponent(𝗾𝘂𝗲𝗿𝘆)}`, {
                timeout: 15000
            });

            if (!𝗱𝗮𝘁𝗮 || !𝗱𝗮𝘁𝗮.title || !𝗱𝗮𝘁𝗮.downloadUrl) {
                return m.reply(𝗯𝗼𝗹𝗱("❌ 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗦𝗖𝗔𝗡 𝗙𝗔𝗜𝗟𝗘𝗗\n┏━━━━━━━━━━━━━━┓\n┃ 𝗔𝗣𝗞 𝗻𝗼𝘁 𝗳𝗼𝘂𝗻𝗱 𝗶𝗻 𝗱𝗮𝘁𝗮𝗯𝗮𝘀𝗲\n┗━━━━━━━━━━━━━━┛"));
            }

            // 𝗖𝗵𝗲𝗰𝗸 𝗳𝗶𝗹𝗲 𝘀𝗶𝘇𝗲
            const 𝘀𝗶𝘇𝗲𝗠𝗮𝘁𝗰𝗵 = 𝗱𝗮𝘁𝗮.size.match(/([\d.]+)\s*(𝗠𝗕|𝗞𝗕)/i);
            let 𝗳𝗶𝗹𝗲𝗦𝗶𝘇𝗲𝗕𝘆𝘁𝗲𝘀 = 0;
            
            if (𝘀𝗶𝘇𝗲𝗠𝗮𝘁𝗰𝗵) {
                const 𝘀𝗶𝘇𝗲𝗩𝗮𝗹𝘂𝗲 = parseFloat(𝘀𝗶𝘇𝗲𝗠𝗮𝘁𝗰𝗵[1]);
                const 𝘂𝗻𝗶𝘁 = 𝘀𝗶𝘇𝗲𝗠𝗮𝘁𝗰𝗵[2].toUpperCase();
                𝗳𝗶𝗹𝗲𝗦𝗶𝘇𝗲𝗕𝘆𝘁𝗲𝘀 = 𝘂𝗻𝗶𝘁 === "𝗠𝗕" ? 𝘀𝗶𝘇𝗲𝗩𝗮𝗹𝘂𝗲 * 1024 * 1024 : 𝘀𝗶𝘇𝗲𝗩𝗮𝗹𝘂𝗲 * 1024;
                
                if (𝗳𝗶𝗹𝗲𝗦𝗶𝘇𝗲𝗕𝘆𝘁𝗲𝘀 > 𝗠𝗔𝗫_𝗦𝗜𝗭𝗘) {
                    return m.reply(𝗯𝗼𝗹𝗱(`❌ 𝗙𝗜𝗟𝗘 𝗧𝗢𝗢 𝗟𝗔𝗥𝗚𝗘\n┏━━━━━━━━━━━━━━┓\n┃ 𝗦𝗶𝘇𝗲: ${𝗱𝗮𝘁𝗮.𝘀𝗶𝘇𝗲}\n┃ 𝗠𝗮𝘅: 𝟭𝟱𝟬𝗠𝗕\n┗━━━━━━━━━━━━━━┛`));
                }
            }

            // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀
            await sock.sendMessage(m.chat, {
                text: 𝗯𝗼𝗹𝗱(`⬇️ 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗 𝗜𝗡𝗜𝗧𝗜𝗔𝗧𝗘𝗗\n
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  📦  𝗔𝗽𝗽: ${𝗱𝗮𝘁𝗮.𝘁𝗶𝘁𝗹𝗲}
┃  🧾  𝗩𝗲𝗿𝘀𝗶𝗼𝗻: ${𝗱𝗮𝘁𝗮.𝘃𝗲𝗿𝘀𝗶𝗼𝗻 || '𝗟𝗮𝘁𝗲𝘀𝘁'}
┃  📏  𝗦𝗶𝘇𝗲: ${𝗱𝗮𝘁𝗮.𝘀𝗶𝘇𝗲 || '𝗨𝗻𝗸𝗻𝗼𝘄𝗻'}
┃  ⏱️  𝗘𝘀𝘁𝗶𝗺𝗮𝘁𝗲𝗱 𝗧𝗶𝗺𝗲: ${Math.ceil((𝗳𝗶𝗹𝗲𝗦𝗶𝘇𝗲𝗕𝘆𝘁𝗲𝘀 || 20000000) / 500000)} 𝗦𝗲𝗰𝗼𝗻𝗱𝘀
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛`),
                contextInfo: {
                    externalAdReply: {
                        title: 𝗯𝗼𝗹𝗱("⬇️ 𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗 𝗜𝗡 𝗣𝗥𝗢𝗚𝗥𝗘𝗦𝗦"),
                        body: 𝗯𝗼𝗹𝗱("𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗳𝗶𝗹𝗲 𝗱𝗲𝗹𝗶𝘃𝗲𝗿𝘆"),
                        thumbnailUrl: 𝗱𝗮𝘁𝗮.𝗶𝗰𝗼𝗻 || 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗕𝗔𝗡𝗡𝗘𝗥,
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        sourceUrl: 𝗱𝗮𝘁𝗮.𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗨𝗿𝗹
                    }
                }
            });

            // 𝗖𝗿𝗲𝗮𝘁𝗲 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱 𝘀𝘁𝗿𝗲𝗮𝗺
            const 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗦𝘁𝗿𝗲𝗮𝗺 = got.stream(𝗱𝗮𝘁𝗮.𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗨𝗿𝗹, {
                timeout: { request: 𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗_𝗧𝗜𝗠𝗘𝗢𝗨𝗧 }
            });
            
            // 𝗖𝗿𝗲𝗮𝘁𝗲 𝘁𝗿𝗮𝗻𝘀𝗳𝗼𝗿𝗺 𝘀𝘁𝗿𝗲𝗮𝗺 𝘁𝗼 𝗺𝗼𝗻𝗶𝘁𝗼𝗿 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀
            let 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗲𝗱𝗕𝘆𝘁𝗲𝘀 = 0;
            const 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀𝗦𝘁𝗿𝗲𝗮𝗺 = new stream.Transform({
                transform(chunk, encoding, callback) {
                    𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗲𝗱𝗕𝘆𝘁𝗲𝘀 += chunk.length;
                    callback(null, chunk);
                }
            });

            // 𝗖𝗿𝗲𝗮𝘁𝗲 𝗳𝗶𝗹𝗲𝗻𝗮𝗺𝗲
            const 𝗰𝗹𝗲𝗮𝗻𝗧𝗶𝘁𝗹𝗲 = 𝗱𝗮𝘁𝗮.title.replace(/[^\w\s.-]/gi, '').replace(/\s+/g, '_');
            const 𝘃𝗲𝗿𝘀𝗶𝗼𝗻 = (𝗱𝗮𝘁𝗮.version || 'v1.0').replace(/[^\d.]/g, '');
            const 𝗳𝗶𝗹𝗲𝗻𝗮𝗺𝗲 = `${𝗰𝗹𝗲𝗮𝗻𝗧𝗶𝘁𝗹𝗲}_${𝘃𝗲𝗿𝘀𝗶𝗼𝗻}.apk`.substring(0, 80);

            // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗳𝗶𝗹𝗲 𝗱𝗲𝗹𝗶𝘃𝗲𝗿𝘆
            await sock.sendMessage(m.chat, {
                document: stream.pipeline(𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗦𝘁𝗿𝗲𝗮𝗺, 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀𝗦𝘁𝗿𝗲𝗮𝗺, () => {}),
                fileName: 𝗳𝗶𝗹𝗲𝗻𝗮𝗺𝗲,
                mimetype: "application/vnd.android.package-archive",
                caption: 𝗯𝗼𝗹𝗱(`📦 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗔𝗣𝗞 𝗗𝗘𝗟𝗜𝗩𝗘𝗥𝗬\n
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  ✅  ${𝗱𝗮𝘁𝗮.𝘁𝗶𝘁𝗹𝗲} (${𝗱𝗮𝘁𝗮.𝘃𝗲𝗿𝘀𝗶𝗼𝗻 || '𝗟𝗮𝘁𝗲𝘀𝘁'})
┃  📏  𝗦𝗶𝘇𝗲: ${𝗱𝗮𝘁𝗮.𝘀𝗶𝘇𝗲 || '𝗨𝗻𝗸𝗻𝗼𝘄𝗻'}
┃  🔒  𝗦𝗲𝗰𝘂𝗿𝗶𝘁𝘆: ${𝗱𝗮𝘁𝗮.𝘃𝗶𝗿𝘂𝘀𝘁𝗼𝘁𝗮𝗹 ? '𝗦𝗰𝗮𝗻𝗻𝗲𝗱' : '𝗡𝗼𝘁 𝘀𝗰𝗮𝗻𝗻𝗲𝗱'}
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛`),
                contextInfo: {
                    externalAdReply: {
                        title: 𝗯𝗼𝗹𝗱("✅ 𝗗𝗢𝗪𝗡𝗟𝗢𝗔𝗗 𝗖𝗢𝗠𝗣𝗟𝗘𝗧𝗘"),
                        body: 𝗯𝗼𝗹𝗱("𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻 𝗴𝘂𝗶𝗱𝗲 𝗯𝗲𝗹𝗼𝘄"),
                        thumbnailUrl: 𝗱𝗮𝘁𝗮.𝗶𝗰𝗼𝗻 || 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗕𝗔𝗡𝗡𝗘𝗥,
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        sourceUrl: "https://www.wikihow.com/Install-APK-Files-on-Android"
                    }
                }
            }, { quoted: m });

            // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗮𝘂𝗱𝗶𝗼 𝗮𝗹𝗲𝗿𝘁
            await sock.sendMessage(m.chat, {
                audio: { url: 𝗤𝗨𝗔𝗡𝗧𝗨𝗠_𝗔𝗨𝗗𝗜𝗢 },
                mimetype: 'audio/mp4',
                ptt: true
            });

            // 𝗤𝘂𝗮𝗻𝘁𝘂𝗺 𝗶𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻 𝗴𝘂𝗶𝗱𝗲
            await sock.sendMessage(m.chat, {
                text: 𝗯𝗼𝗹𝗱(`📲 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗜𝗡𝗦𝗧𝗔𝗟𝗟𝗔𝗧𝗜𝗢𝗡\n
┏━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  𝟭. 𝗢𝗽𝗲𝗻 𝗱𝗼𝘄𝗻𝗹𝗼𝗮𝗱𝗲𝗱 𝗔𝗣𝗞
┃  𝟮. 𝗔𝗹𝗹𝗼𝘄 "𝗨𝗻𝗸𝗻𝗼𝘄𝗻 𝗦𝗼𝘂𝗿𝗰𝗲𝘀"
┃  𝟯. 𝗧𝗮𝗽 𝗜𝗻𝘀𝘁𝗮𝗹𝗹 → 𝗗𝗼𝗻𝗲
┃  
┃  ⚠️  𝗦𝗘𝗖𝗨𝗥𝗜𝗧𝗬 𝗡𝗢𝗧𝗜𝗖𝗘:
┃  𝗔𝗹𝘄𝗮𝘆𝘀 𝘀𝗰𝗮𝗻 𝗔𝗣𝗞𝘀 𝗯𝗲𝗳𝗼𝗿𝗲 𝗶𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻
┃  🔗 ${𝗱𝗮𝘁𝗮.𝘃𝗶𝗿𝘂𝘀𝘁𝗼𝘁𝗮𝗹 || '𝗵𝘁𝘁𝗽𝘀://𝘃𝗶𝗿𝘂𝘀𝘁𝗼𝘁𝗮𝗹.𝗰𝗼𝗺'}
┗━━━━━━━━━━━━━━━━━━━━━━━━━┛`),
                contextInfo: {
                    externalAdReply: {
                        title: 𝗯𝗼𝗹𝗱("⚠️ 𝗦𝗘𝗖𝗨𝗥𝗜𝗧𝗬 𝗔𝗟𝗘𝗥𝗧"),
                        body: 𝗯𝗼𝗹𝗱("𝗦𝗰𝗮𝗻 𝗳𝗶𝗹𝗲𝘀 𝗯𝗲𝗳𝗼𝗿𝗲 𝗶𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻"),
                        thumbnailUrl: "https://i.ibb.co/9sXqVcG/android-install.png",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        sourceUrl: "https://www.virustotal.com/"
                    }
                }
            });

        } catch (e) {
            console.error(𝗯𝗼𝗹𝗱("[𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗔𝗣𝗞] 𝗘𝗿𝗿𝗼𝗿:"), e);
            return m.reply(𝗯𝗼𝗹𝗱(`❌ 𝗤𝗨𝗔𝗡𝗧𝗨𝗠 𝗙𝗔𝗜𝗟𝗨𝗥𝗘\n┏━━━━━━━━━━━━━━┓\n┃ ${e.message || "𝗗𝗼𝘄𝗻𝗹𝗼𝗮𝗱 𝗳𝗮𝗶𝗹𝗲𝗱"}\n┗━━━━━━━━━━━━━━┛`));
        } finally {
            // 𝗖𝗹𝗲𝗮𝗻 𝗾𝘂𝗮𝗻𝘁𝘂𝗺 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀
            if (𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀𝗠𝘀𝗴) {
                await sock.sendMessage(m.chat, { delete: 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀𝗠𝘀𝗴.key });
            }
        }
    }
};