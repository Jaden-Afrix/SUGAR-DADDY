/*************************************************
 SUGAR DADDY - HYPER REACT SYSTEM v2.0
 Advanced AI-powered message reactions
 Owner: ALPHA-BLAKE
**************************************************/

const fs = require("fs").promises
const path = require("path")
const REACT_FILE = path.join(__dirname, "..", "config", "hyperreact.json")

// Premium emoji collection (100 curated reactions)
const REACT_DATABASE = [
    "üòÇ", "üî•", "‚ù§Ô∏è", "üíØ", "üòé", "ü•µ", "ü•∂", "üò≥", "üò≠", "üò±",
    "üòà", "üëÄ", "üíÄ", "ü§ñ", "üòê", "üòè", "üëª", "üéâ", "üôà", "üí∏",
    "‚ú®", "üåö", "ü§ë", "ü§°", "ü§´", "üçÜ", "üçë", "üîû", "üß†", "üî™",
    "‚ò†Ô∏è", "ü§¨", "üò°", "üò§", "üò©", "ü§Ø", "üòµ‚Äçüí´", "üñï", "ü´£", "ü´°",
    "üò¥", "üò¨", "ü§ì", "üßê", "ü•≤", "üôÉ", "üò∂‚Äçüå´Ô∏è", "üåü", "ü´•", "ü´†",
    "ü§©", "ü•∞", "ü•≥", "ü§™", "üòú", "ü§ó", "ü´¢", "ü§≠", "ü´•", "ü•¥",
    "ü´§", "üò∂", "üòë", "üòí", "üôÑ", "ü§î", "ü§•", "ü§ê", "ü´®", "ü•±",
    "üò™", "üòÆ‚Äçüí®", "üòÆ", "üòØ", "üò≤", "ü•π", "üò£", "üòñ", "üò´", "üßä",
    "‚ö°", "üí•", "ü´∂", "ü§ü", "ü§ò", "ü´∞", "‚úåÔ∏è", "ü§å", "ü´≥", "ü´¥",
    "üíÖ", "ü§≥", "üíÉ", "üï∫", "üëë", "üíé", "üëΩ", "ü§†", "ü•∑", "ü¶π"
]

// Reaction intelligence matrix
const REACT_MATRIX = {
    active: true,
    groups: true,
    speed: 1.0,
    lastUpdated: new Date().toISOString()
}

const AD_TEMPLATE = {
    title: "ü§ñ SUGAR DADDY AI",
    body: "Hyper Reaction System",
    thumbnailUrl: "https://i.ibb.co/4RfnHtVr/SulaMd.jpg",
    mediaType: 1,
    renderLargerThumbnail: true,
    sourceUrl: "https://whatsapp.com/channel/0029VbAxoHNF6sn7hhz2Ss24"
}

// Turbo initialization
;(async () => {
    try {
        const data = await fs.readFile(REACT_FILE, 'utf8')
        Object.assign(REACT_MATRIX, JSON.parse(data))
        console.log(`[HYPER REACT] ${REACT_MATRIX.active ? '‚ö° ACTIVE' : 'üí§ SLEEPING'} | Groups: ${REACT_MATRIX.groups ? '‚úÖ' : '‚ùå'}`)
    } catch {
        await fs.mkdir(path.dirname(REACT_FILE), { recursive: true })
        await fs.writeFile(REACT_FILE, JSON.stringify(REACT_MATRIX))
    }
})()

// Cooldown system (user-based)
const reactionCooldown = new Map()

module.exports = {
    name: "hyperreact",
    alias: ["autoreact", "smartreact", "aireact"],
    category: "ai",
    desc: "ü§ñ AI-powered automatic message reactions",
    use: "<on/off/groups>",

    async exec(m, { sock, args, isOwner }) {
        if (!isOwner) return m.reply("üö´ *AI SYSTEM LOCKED*\nOwner authentication required")

        const action = args[0]?.toLowerCase()
        const response = { quoted: m }

        switch(action) {
            case "on":
                REACT_MATRIX.active = true
                REACT_MATRIX.lastUpdated = new Date().toISOString()
                await fs.writeFile(REACT_FILE, JSON.stringify(REACT_MATRIX))
                return sock.sendMessage(m.chat, {
                    text: `ü§ñ *HYPER REACT ACTIVATED*\n
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  ‚úÖ  ùóîùóú  ùó•ùóòùóîùóñùóßùóúùó¢ùó°ùó¶  ùóòùó°ùóîùóïùóüùóòùóó
‚îÉ  ‚ö°  ùó•ùóòùóîùóñùóß  ùó¶ùó£ùóòùóòùóó: ùó®ùóüùóßùó•ùóî
‚îÉ  üí´  ùóñùó®ùó•ùóîùóßùóòùóó  ùóòùó†ùó¢ùóùùóúùó¶: ùü≠ùü¨ùü¨+
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`,
                    contextInfo: { externalAdReply: AD_TEMPLATE }
                }, response)

            case "off":
                REACT_MATRIX.active = false
                REACT_MATRIX.lastUpdated = new Date().toISOString()
                await fs.writeFile(REACT_FILE, JSON.stringify(REACT_MATRIX))
                return sock.sendMessage(m.chat, {
                    text: `üí§ *HYPER REACT DEACTIVATED*\n
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  üö´  ùóîùó®ùóßùó¢ ùó•ùóòùóîùóñùóßùóúùó¢ùó°ùó¶  ùóóùóúùó¶ùóîùóïùóüùóòùóó
‚îÉ  ü§ñ  ùóîùóú  ùó¶ùó¨ùó¶ùóßùóòùó†  ùó¶ùóßùóîùó°ùóóùóúùó°ùóö  ùóïùó¨
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`,
                    contextInfo: { externalAdReply: AD_TEMPLATE }
                }, response)

            case "groups":
                REACT_MATRIX.groups = !REACT_MATRIX.groups
                await fs.writeFile(REACT_FILE, JSON.stringify(REACT_MATRIX))
                return sock.sendMessage(m.chat, {
                    text: `‚öôÔ∏è *GROUP REACTIONS ${REACT_MATRIX.groups ? 'ENABLED' : 'DISABLED'}*\n
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  üîÑ  ùóöùó•ùó¢ùó®ùó£  ùó†ùó¢ùóóùóò: ${REACT_MATRIX.groups ? '‚úÖ ùó¢ùó°' : '‚ùå ùó¢ùóôùóô'}
‚îÉ  üí¨  ùóïùó¢ùóß ùó™ùóúùóüùóü ${REACT_MATRIX.groups ? '' : 'ùó°ùó¢ùóß'} ùó•ùóòùóîùóñùóß ùóúùó° ùóöùó•ùó¢ùó®ùó£ùó¶
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`,
                    contextInfo: { externalAdReply: AD_TEMPLATE }
                }, response)

            default:
                return sock.sendMessage(m.chat, {
                    text: `‚ö° *HYPER REACT SYSTEM*\n
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  üîÑ  \`hyperreact on\`
‚îÉ  ¬†¬†¬†‚îî Activate AI reactions
‚îÉ
‚îÉ  üîÑ  \`hyperreact off\`
‚îÉ  ¬†¬†¬†‚îî Deactivate reactions
‚îÉ
‚îÉ  üîÑ  \`hyperreact groups\`
‚îÉ  ¬†¬†¬†‚îî Toggle group reactions
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
¬ª Status: ${REACT_MATRIX.active ? 'üü¢ ACTIVE' : 'üî¥ INACTIVE'}
¬ª Groups: ${REACT_MATRIX.groups ? '‚úÖ ENABLED' : '‚ùå DISABLED'}`,
                    contextInfo: { externalAdReply: AD_TEMPLATE }
                }, response)
        }
    },

    async handler(m, { sock }) {
        // System checks
        if (!REACT_MATRIX.active || m.fromMe) return
        if (m.isGroup && !REACT_MATRIX.groups) return
        
        // Cooldown management
        const userKey = m.isGroup ? `${m.chat}_${m.sender}` : m.sender
        const lastReact = reactionCooldown.get(userKey) || 0
        const cooldown = REACT_MATRIX.speed > 0.5 ? 2000 : 5000 // Dynamic cooldown
        
        if (Date.now() - lastReact < cooldown) return
        reactionCooldown.set(userKey, Date.now())
        
        // AI-powered reaction selection
        try {
            const selectedEmoji = REACT_DATABASE[Math.floor(Math.random() * REACT_DATABASE.length)]
            await sock.sendMessage(m.chat, { 
                react: { 
                    text: selectedEmoji, 
                    key: m.key 
                }
            })
        } catch (e) {
            console.error(`[HYPER REACT] ${e.message}`)
        }
    }
}